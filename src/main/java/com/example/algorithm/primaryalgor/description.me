转载自：https://www.cnblogs.com/onepixel/articles/7674659.html
0、算法概述
  0.1 算法分类
    十种常见排序算法可以分为两大类：
      非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。
      线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。

                                        |-冒泡排序
                              |--交换排序|
                              |         |-快速排序
                              |
                              |         |-简单插入排序
                              |--插入排序|
                              |         |希尔排序:http://www.cnblogs.com/skywang12345/p/3597597.html
        |--非线性时间比较类排序--|
        |                     |         |-简单选择排序
        |                     |--选择排序|
        |                     |         |-堆排序
        |                     |
        |                     |
        |                     |         |-二路归并排序
        |                     |--归并排序|
        |                               |-多路归并排序
-排序算法|
        |                   |-基数排序
        |                   |
        |-- 线性时间比较类排序 |-桶排序
                            |
                            |计数排序：https://www.cnblogs.com/developerY/p/3166462.html
  0.2算法复杂度
  排序方法    时间复杂度（平均）  时间复杂度（最坏）  时间复杂度（最好）   空间复杂度    稳定性

  插入排序        O(n^2)          O(n^2)            O(n)              O(1)       稳定
  希尔排序        O(n^1.3)        O(n^2)            O(n)              O(1)       不稳定

  冒泡排序        O(n^2)          O(n^2)             O(n)              O(1)       稳定
  快速排序        O(nlogn)        O(n^2)             O(n)              O(nlogn)   不稳定

  选择排序        O(n^2)          O(n^2)            O(n^2)            O(1)       不稳定
  堆排序          O(nlogn)        O(nlogn)          O(nlogn)          O(1)       不稳定

  归并排序        O(nlogn)        O(nlogn)           O(nlogn)          O(n)       不稳定

  计数排序         O(n+k)         O(n+k)             O(n+k)             O(n+k)     稳定
  桶排序           O(n+k)         O(n^2)             O(n)               O(n+k)     稳定
  基数排序         O(n*k)         O(n*k)             O(n*k)             O(n+k)     稳定
  基于桶排序的基数排序，桶排序是计数排序的升级版
  0.3 相关概念
    稳定：如果a原本在b前面，而a=b，排序后a仍然在b的前面
    不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。
    时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
    空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。

1、冒泡排序：https://www.cnblogs.com/shen-hua/p/5422676.html
    冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。
    走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
    这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。
  1.1 算法描述
    比较相邻的元素。如果第一个比第二个大，就交换它们两个；
    对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
    针对所有的元素重复以上的步骤，除了最后一个；
    重复步骤1~3，直到排序完成。
  1.2 动图演示
  举例说明：要排序数组：int[] arr={6,3,8,2,9,1};
  第一趟排序：
  　　　　第一次排序：6和3比较，6大于3，交换位置：  3  6  8  2  9  1
  　　　　第二次排序：6和8比较，6小于8，不交换位置：3  6  8  2  9  1
  　　　　第三次排序：8和2比较，8大于2，交换位置：  3  6  2  8  9  1
  　　　　第四次排序：8和9比较，8小于9，不交换位置：3  6  2  8  9  1
  　　　　第五次排序：9和1比较：9大于1，交换位置：  3  6  2  8  1  9
  　　　　第一趟总共进行了5次比较， 排序结果：      3  6  2  8  1  9
  ---------------------------------------------------------------------
  第二趟排序：
  　　　　第一次排序：3和6比较，3小于6，不交换位置：3  6  2  8  1  9
  　　　　第二次排序：6和2比较，6大于2，交换位置：  3  2  6  8  1  9
  　　　　第三次排序：6和8比较，6大于8，不交换位置：3  2  6  8  1  9
  　　　　第四次排序：8和1比较，8大于1，交换位置：  3  2  6  1  8  9
  　　　　第二趟总共进行了4次比较， 排序结果：      3  2  6  1  8  9
  ---------------------------------------------------------------------
  第三趟排序：
　　　　第一次排序：3和2比较，3大于2，交换位置：  2  3  6  1  8  9
　　　　第二次排序：3和6比较，3小于6，不交换位置：2  3  6  1  8  9
　　　　第三次排序：6和1比较，6大于1，交换位置：  2  3  1  6  8  9
　　　　第二趟总共进行了3次比较， 排序结果：         2  3  1  6  8  9
  ---------------------------------------------------------------------
  第四趟排序：
　　　　第一次排序：2和3比较，2小于3，不交换位置：2  3  1  6  8  9
　　　　第二次排序：3和1比较，3大于1，交换位置：  2  1  3  6  8  9
　　　　第二趟总共进行了2次比较， 排序结果：        2  1  3  6  8  9
  ---------------------------------------------------------------------
  第五趟排序：
　　　　第一次排序：2和1比较，2大于1，交换位置：  1  2  3  6  8  9
　　　　第二趟总共进行了1次比较， 排序结果：  1  2  3  6  8  9
---------------------------------------------------------------------
最终结果：1  2  3  6  8  9
冒泡排序的优点：每进行一趟排序，就会少比较一次，因为每进行一趟排序都会找出一个较大值。
  如上例：第一趟比较之后，排在最后的一个数一定是最大的一个数，
  第二趟排序的时候，只需要比较除了最后一个数以外的其他的数，同样也能找出一个最大的数排在参与第二趟比较的数后面，第三趟比较的时候，只需要比较除了最后两个数以外的其他的数，
  以此类推……也就是说，每进行一趟比较，每一趟少比较一次，一定程度上减少了算法的量。
用时间复杂度来说：
  1.如果我们的数据正序，只需要走一趟即可完成排序。所需的比较次数C和记录移动次数M均达到最小值，即：Cmin=n-1;Mmin=0;所以，冒泡排序最好的时间复杂度为O(n)。
  2.如果很不幸我们的数据是反序的，则需要进行n-1趟排序。每趟排序要进行n-i次比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：
  1.3 代码实现


2、快速排序（Quick Sort）
    快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。
  2.1 算法描述
    快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：
    从数列中挑出一个元素，称为 “基准”（pivot）；
    重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；
    递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。
  2.2 动图演示
  2.3 代码实现

3、选择排序（Selection Sort）：https://www.cnblogs.com/shen-hua/p/5424059.html
    选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：
    首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，
    然后，再从剩余未排序元素中继续寻找最小（大）元素，
    然后放到已排序序列的末尾。
    以此类推，直到所有元素均排序完毕。

  3.1 算法描述
   a) 原理：每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。也就是：每一趟在n-i+1(i=1，2，…n-1)个记录中选取关键字最小的记录作为有序序列中第i个记录。基于此思想的算法主要有简单选择排序、树型选择排序和堆排序。（这里只介绍常用的简单选择排序）
   b) 简单选择排序的基本思想：给定数组：int[] arr={里面n个数据}；第1趟排序，在待排序数据arr[1]~arr[n]中选出最小的数据，将它与arrr[1]交换；第2趟，在待排序数据arr[2]~arr[n]中选出最小的数据，将它与r[2]交换；以此类推，第i趟在待排序数据arr[i]~arr[n]中选出最小的数据，将它与r[i]交换，直到全部排序完成。
   c) 举例：数组 int[] arr={5,2,8,4,9,1};
   -------------------------------------------------------
   第一趟排序： 原始数据：5  2  8  4  9  1
   最小数据1，把1放在首位，也就是1和5互换位置，
   排序结果：1  2  8  4  9  5
   -------------------------------------------------------
   第二趟排序：
   第1以外的数据{2  8  4  9  5}进行比较，2最小，
   排序结果：1  2  8  4  9  5
   -------------------------------------------------------
   第三趟排序：
   除1、2以外的数据{8  4  9  5}进行比较，4最小，8和4交换
   排序结果：1  2  4  8  9  5
  -------------------------------------------------------
   第四趟排序：
   除第1、2、4以外的其他数据{8  9  5}进行比较，5最小，8和5交换
   排序结果：1  2  4  5  9  8
   第五趟排序：
   除第1、2、4、5以外的其他数据{9  8}进行比较，8最小，8和9交换
   排序结果：1  2  4  5  8  9
   -------------------------------------------------------
注：每一趟排序获得最小数的方法：for循环进行比较，定义一个第三个变量temp，首先前两个数比较，把较小的数放在temp中，然后用temp再去跟剩下的数据比较，如果出现比temp小的数据，就用它代替temp中原有的数据。
选择排序的时间复杂度：简单选择排序的比较次数与序列的初始排序无关。
假设待排序的序列有 N 个元素，则比较次数永远都是N (N - 1) / 2。
而移动次数与序列的初始排序有关。当序列正序时，移动次数最少，为 0。
当序列反序时，移动次数最多，为3N (N - 1) /  2。
所以，综上，简单排序的时间复杂度为 O(N2)。

5、归并排序（Merge Sort）
    归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。
    将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。
  5.1 算法描述
    把长度为n的输入序列分成两个长度为n/2的子序列；
    对这两个子序列分别采用归并排序；
    将两个排序好的子序列合并成一个最终的排序序列。
    归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。
