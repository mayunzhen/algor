git init
git config --global user.name "mayunzhen"
git config --global user.email "632940781@qq.com"

git remote add origin https://github.com/mayunzhen/emm.git

git pull origin master --allow-unrelated-histories

git branch --set-upstream-to=origin/master master

git branch --set-upstream-to=origin/master:master
git branch --set-upstream-to=origin/master
git pull --rebase <远程主机名> <远程分支名>:<本地分支名>

1)在本地创建feature/myz1分支，并且追踪远端origin/feature/myz1分支命令：(important)
git checkout --track origin/feature/myz1

代码打tag步骤：
   git tag -a 6.0.6 -m 'mobike-redisweb version 6.0.6’
   git tag
   git push origin --tags

2)首先在本地创建feature/myz1分支，然后从远端feature/myz1分支拉取代码到本地：(important)
git checkout -b feature/myz1
git pull origin feature/myz1
git push --set-upstream origin feature/myz1
这样就把本地feature/myz1分支和远端origin/feature/myz1分支代码关联一致了。
3)(important)
git checkout -b feature/myz3 origin/feature/myz3

把本地的dev合并到master(在Master分支上操作这个命令)
git merge dev

克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。
$ git clone -o emm https://github.com/mayunzhen/emm.git
$ git emm
emm




1、 mkdir git-operator-test
2、cd git-operator-test
3、git init
4、git config --global user.name 'mayunzhen'
5、git config --global user.email '632940781@qq.com'
6、touch 1.cpp
7、git add 1.cpp
8、git commit -m 'add 1.cpp'
9、添加id_rsa.pub内容到github主页的settings中；
10、git push -u origin master -f （-f是强制的意思）
11、git checkout -b feature1
12、git push origin feature1
13、make a new follder and execute :
git clone https://github.com/mayunzhen/git-operator-test.git -o booyah
Then ,execute :git status ,look:
1) git remote add upstream  https://github.com/mayunzhen/git-operator-test.git
2)git remote -v
booyah	https://github.com/mayunzhen/git-operator-test.git (fetch)
booyah	https://github.com/mayunzhen/git-operator-test.git (push)
upstream	https://github.com/mayunzhen/git-operator-test.git (fetch)
upstream	https://github.com/mayunzhen/git-operator-test.git (push)
Expand:
# 查看关联的远程仓库的名称
git remote
# 查看关联的远程仓库的详细信息
git remote -v
# git_url 为你的远程仓库的 url，可采用 http 协议或 ssh（git） 协议
git remote add origin <url>
git remote remove <name>


    ThreadLocal是用来维护线程中的变量不被其他线程干扰而出现的一个结构，内部包含一个ThreadLocalMap类，该类为Thread类的一个局部变量，该Map存储的key为ThreadLocal对象自身，value为我们要存储的对象，这样一来，在不同线程中，持有的其实都是当前线程的变量副本，与其他线程完全隔离，以此来保证线程执行过程中不受其他线程的影响。
TLAB（Thread Local Allocation Buffer）

栈上分配的技术基础：
一是逃逸分析：逃逸分析的目的是判断对象的作用域是否有可能逃逸出函数体。关于逃逸分析的问题可以看我另一篇文章：

二是标量替换：允许将对象打散分配在栈上，比如若一个对象拥有两个字段，会将这两个字段视作局部变量进行分配。

只能在server模式下才能启用逃逸分析，参数-XX:DoEscapeAnalysis启用逃逸分析，参数-XX:+EliminateAllocations开启标量替换（默认打开）
https://blog.csdn.net/xiaomingdetianxia/article/details/77688945
指针碰撞(Serial、ParNew等带Compact过程的收集器)
假设Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”（Bump the Pointer）。
空闲列表(CMS这种基于Mark-Sweep算法的收集器)
如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List）。