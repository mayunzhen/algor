1、Lambda 表达式
    Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。
    Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。
    lambda 表达式的语法格式如下：
    (parameters) -> expression
    或
    (parameters) ->{ statements; }

    example：
    // 1. 不需要参数,返回值为 5
    () -> 5
    // 2. 接收一个参数(数字类型),返回其2倍的值
    x -> 2 * x
    // 3. 接受2个参数(数字),并返回他们的差值
    (x, y) -> x – y
    // 4. 接收2个int型整数,返回他们的和
    (int x, int y) -> x + y
    // 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)
    (String s) -> System.out.print(s)
2、函数式接口

    1、@FunctionalInterface
      public interface Consumer<T> {
          void accept(T t);
      }
    2、@FunctionalInterface
      public interface Function<T,R> {
          R apply(T t);
      }
    3、@FunctionalInterface
      public interface Supplier<T> {
          T get();
      }
    4、@FunctionalInterface
      public interface Predicate<T> {
          boolean test(T t);
      }
    函数式接口是为了lamda表达式服务，函数式接口的存在是Lamda表达式出现的前提，Lamda表达式想关于重写了函数式接口中的唯一方法。



