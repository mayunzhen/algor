http://www.importnew.com/30461.html
https://blog.csdn.net/f2006116/article/details/52469331
http://www.importnew.com/31126.html
https://www.jianshu.com/p/66e4e64ff278
https://blog.csdn.net/qq_26222859/article/details/73135660

 对象的创建
        1.类加载检查2.分配内存3.初始化零值4.设置对象头5.执行init
 1. 类加载检查：虚拟机遇到一条new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，
    并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。
 2. 分配内存：在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后便可确定，
    为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，
    选择那种分配方式由 Java 堆是否规整决定，而Java堆是否规整又由所采用的  垃圾收集器是否带有压缩整理功能  决定。

    备注1：  内存分配的两种方式：（补充内容，需要掌握）
            选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。
            而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），
            值得注意的是，复制算法内存也是规整的。
    备注2：  内存分配并发问题（补充内容，需要掌握）
            在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，
            作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：
             1）CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，
                如果因为冲突失败就重试，直到成功为止。虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。
             2）TLAB： 为每一个线程预先在 Eden 区分配一块内存。JVM 在给线程中的对象分配内存时，
                首先在 TLAB 分配，当对象大于TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配。
   3. 初始化零值： 内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。

   4. 设置对象头： 初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。

   5. 执行 init 方法： 在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，
   对象创建才刚开始，<init> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <init> 方法，
   把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。


   虚拟机栈除了上述错误外，还有另一种错误，那就是当申请不到空间时，会抛出 OutOfMemoryError。
   这里有一个小细节需要注意，catch 捕获的是 Throwable，而不是 Exception。
   因为 StackOverflowError 和 OutOfMemoryError 都不属于 Exception 的子类。

    全局字符串池（string pool也有叫做string literal pool）
    全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，
    然后将该字符串对象实例的引用值存到string pool中
    （记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。
     在HotSpot VM里实现的string pool功能的是一个StringTable类，
     它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），
     也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。
     这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。


   class文件常量池（class constant pool）一般包括下面三类常量:1、类和接口的全限定名 2、字段的名称和描述符 3、方法的名称和描述符
   我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，
   还有一项信息就是常量池(constant pool table)，用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic References)。
   字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。
   符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可
   （它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）

   运行时常量池（runtime constant pool）
   当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？
   jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。
   而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。
   在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。
   而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，
   也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。

   最近一直被方法区里面存着什么东西困扰着？

          1.方法区里存class文件信息和class文件常量池是个什么关系。

          2.class文件常量池和运行时常量池是什么关系。

          方法区存着类的信息，常量和静态变量，即类被编译后的数据。
          这个说法其实是没问题的，只是太笼统了。
          更加详细一点的说法是  方法区里存放着类的版本，字段，方法，接口和常量池。
                             常量池里存储着字面量和符号引用。

          符号引用包括：1.类的全限定名，2.字段名和属性，3.方法名和属性。

          下面一张图是我画的方法区，class文件信息，class文件常量池和运行时常量池的关系
            https://blog.csdn.net/qq_26222859/article/details/73135660


